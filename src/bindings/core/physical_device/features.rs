use crate::VkBool32;

#[repr(C)]
#[derive(Default)]
pub(crate) struct VkPhysicalDeviceFeatures {
    pub(crate) robust_buffer_access: VkBool32,
    pub(crate) full_draw_index_uint_32: VkBool32,
    pub(crate) image_cube_array: VkBool32,
    pub(crate) independent_blend: VkBool32,
    pub(crate) geometry_shader: VkBool32,
    pub(crate) tessellation_shader: VkBool32,
    pub(crate) sample_rate_shading: VkBool32,
    pub(crate) dual_src_blend: VkBool32,
    pub(crate) logic_op: VkBool32,
    pub(crate) multi_draw_indirect: VkBool32,
    pub(crate) draw_indirect_first_instance: VkBool32,
    pub(crate) depth_clamp: VkBool32,
    pub(crate) depth_bias_clamp: VkBool32,
    pub(crate) fill_mode_non_solid: VkBool32,
    pub(crate) depth_bounds: VkBool32,
    pub(crate) wide_lines: VkBool32,
    pub(crate) large_points: VkBool32,
    pub(crate) alpha_to_one: VkBool32,
    pub(crate) multi_viewport: VkBool32,
    pub(crate) sampler_anisotropy: VkBool32,
    pub(crate) texture_compression_etc_2: VkBool32,
    pub(crate) texture_compression_astc_ldr: VkBool32,
    pub(crate) texture_compression_bc: VkBool32,
    pub(crate) occlusion_query_precise: VkBool32,
    pub(crate) pipeline_statistics_query: VkBool32,
    pub(crate) vertex_pipeline_stores_and_atomics: VkBool32,
    pub(crate) fragment_stores_and_atomics: VkBool32,
    pub(crate) shader_tessellation_and_geometry_point_size: VkBool32,
    pub(crate) shader_image_gather_extended: VkBool32,
    pub(crate) shader_storage_image_extended_formats: VkBool32,
    pub(crate) shader_storage_image_multisample: VkBool32,
    pub(crate) shader_storage_image_read_without_format: VkBool32,
    pub(crate) shader_storage_image_write_without_format: VkBool32,
    pub(crate) shader_uniform_buffer_array_dynamic_indexing: VkBool32,
    pub(crate) shader_sampled_image_array_dynamic_indexing: VkBool32,
    pub(crate) shader_storage_buffer_array_dynamic_indexing: VkBool32,
    pub(crate) shader_storage_image_array_dynamic_indexing: VkBool32,
    pub(crate) shader_clip_distance: VkBool32,
    pub(crate) shader_cull_distance: VkBool32,
    pub(crate) shader_float_64: VkBool32,
    pub(crate) shader_int_64: VkBool32,
    pub(crate) shader_int_16: VkBool32,
    pub(crate) shader_resource_residency: VkBool32,
    pub(crate) shader_resource_min_lod: VkBool32,
    pub(crate) sparse_binding: VkBool32,
    pub(crate) sparse_residency_buffer: VkBool32,
    pub(crate) sparse_residency_image_2d: VkBool32,
    pub(crate) sparse_residency_image_3d: VkBool32,
    pub(crate) sparse_residency_2_samples: VkBool32,
    pub(crate) sparse_residency_4_samples: VkBool32,
    pub(crate) sparse_residency_8_samples: VkBool32,
    pub(crate) sparse_residency_16_samples: VkBool32,
    pub(crate) sparse_residency_aliased: VkBool32,
    pub(crate) variable_multisample_rate: VkBool32,
    pub(crate) inherited_queries: VkBool32,
}
